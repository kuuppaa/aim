import cv2
import numpy as np
import pyautogui

# Load the pre-trained Haar Cascade classifier for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Load the pre-trained HOGDescriptor for full-body detection
hog = cv2.HOGDescriptor()
hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())

# Open a connection to the camera (0 represents the default camera)
cap = cv2.VideoCapture(0)

# Set the desired position (center of the screen)
target_x = None
target_y = None

while True:
    # Read a frame from the camera
    ret, frame = cap.read()

    # Convert the frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    # Draw rectangles around the detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

        # Calculate the target position (center of the detected face)
        target_x = x + w // 2
        target_y = y + h // 2

    # Detect bodies in the frame
    bodies, weights = hog.detectMultiScale(frame, winStride=(8, 8), padding=(4, 4), scale=1.05)

    # Draw rectangles around the detected bodies
    for (x, y, w, h) in bodies:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

        # Calculate the target position (center of the detected body)
        target_x = x + w // 2
        target_y = y + h // 2

    # Display the resulting frame
    cv2.imshow('Real-time Tracking', frame)

    # Move the mouse to align the detected head or body with the center of the screen
    if target_x is not None and target_y is not None:
        screen_width, screen_height = pyautogui.size()
        dx = screen_width // 2 - target_x
        dy = screen_height // 2 - target_y
        pyautogui.move(dx, dy)

    # Break the loop when 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close the OpenCV window
cap.release()
cv2.destroyAllWindows()import cv2
import numpy as np
import pyautogui

# Load the pre-trained Haar Cascade classifier for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Load the pre-trained HOGDescriptor for full-body detection
hog = cv2.HOGDescriptor()
hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())

# Open a connection to the camera (0 represents the default camera)
cap = cv2.VideoCapture(0)

# Set the desired position (center of the screen)
target_x = None
target_y = None

while True:
    # Read a frame from the camera
    ret, frame = cap.read()

    # Convert the frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    # Draw rectangles around the detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

        # Calculate the target position (center of the detected face)
        target_x = x + w // 2
        target_y = y + h // 2

    # Detect bodies in the frame
    bodies, weights = hog.detectMultiScale(frame, winStride=(8, 8), padding=(4, 4), scale=1.05)

    # Draw rectangles around the detected bodies
    for (x, y, w, h) in bodies:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

        # Calculate the target position (center of the detected body)
        target_x = x + w // 2
        target_y = y + h // 2

    # Display the resulting frame
    cv2.imshow('Real-time Tracking', frame)

    # Move the mouse to align the detected head or body with the center of the screen
    if target_x is not None and target_y is not None:
        screen_width, screen_height = pyautogui.size()
        dx = screen_width // 2 - target_x
        dy = screen_height // 2 - target_y
        pyautogui.move(dx, dy)

    # Break the loop when 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close the OpenCV window
cap.release()
cv2.destroyAllWindows()import cv2
import numpy as np
import pyautogui

# Load the pre-trained Haar Cascade classifier for face detection
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# Load the pre-trained HOGDescriptor for full-body detection
hog = cv2.HOGDescriptor()
hog.setSVMDetector(cv2.HOGDescriptor_getDefaultPeopleDetector())

# Open a connection to the camera (0 represents the default camera)
cap = cv2.VideoCapture(0)

# Set the desired position (center of the screen)
target_x = None
target_y = None

while True:
    # Read a frame from the camera
    ret, frame = cap.read()

    # Convert the frame to grayscale for face detection
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    # Detect faces in the frame
    faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

    # Draw rectangles around the detected faces
    for (x, y, w, h) in faces:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)

        # Calculate the target position (center of the detected face)
        target_x = x + w // 2
        target_y = y + h // 2

    # Detect bodies in the frame
    bodies, weights = hog.detectMultiScale(frame, winStride=(8, 8), padding=(4, 4), scale=1.05)

    # Draw rectangles around the detected bodies
    for (x, y, w, h) in bodies:
        cv2.rectangle(frame, (x, y), (x+w, y+h), (255, 0, 0), 2)

        # Calculate the target position (center of the detected body)
        target_x = x + w // 2
        target_y = y + h // 2

    # Display the resulting frame
    cv2.imshow('Real-time Tracking', frame)

    # Move the mouse to align the detected head or body with the center of the screen
    if target_x is not None and target_y is not None:
        screen_width, screen_height = pyautogui.size()
        dx = screen_width // 2 - target_x
        dy = screen_height // 2 - target_y
        pyautogui.move(dx, dy)

    # Break the loop when 'q' key is pressed
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

# Release the camera and close the OpenCV window
cap.release()
cv2.destroyAllWindows()
